---
title: "Multi-level Model"
date-modified: "today"
subtitle: "Bias in PERSUADE"
format: pdf
code-fold: false
code-overflow: wrap
editor: 
  markdown: 
    wrap: 80
---

```{r, message = FALSE, warning = FALSE}
library(sjPlot)
library(lme4)
library(car) # level names in contrasts
library(stargazer) # LaTeX tables
library(emmeans)
library(performance) # ICC
library(tidyverse)
library(forcats)

dfp <- read.csv("../data/persuade-predictions-long.csv",
               na.strings = c("", " ", "NA")) %>% 
  select(-c(full_text, X, assignment, source_text)) %>%
  mutate_if(is.character, as.factor) %>%
  
  # drop American Indian/Alaskan Native group because there are < 200 samples
  filter(race_ethnicity != "American Indian/Alaskan Native") %>%
  
  # remove unused levels (American Indian/Alaskan Native)
  droplevels() %>% 
  
  # simplify level and variable names
  mutate(
    Transformer=fct_recode(model,
                   control="control_pred",
                   black="baa_pred",
                   hispanic="hl_pred",
                   white="w_pred"),
    race=fct_recode(race_ethnicity,
                    asian="Asian/Pacific Islander",
                    black="Black/African American", 
                    hisp="Hispanic/Latino",
                    other="Two or more races/Other",
                    white="White")
    ) %>% 
  
  # calculate root mean absolute error
  mutate(mae=abs(pred_error)) %>%
  
  # calculate percent error
  mutate(percent_error = (pred_error/holistic_score_adjudicated)*100) %>% 
  
  # collapse NaNs into negative level of binary factors
  mutate(
    is_ell=fct_collapse(addNA(ell), Yes = "Yes", No = c("No", NA)),
    is_disadvantaged=fct_collapse(addNA(economically_disadvantaged),
                                  Yes = "Economically disadvantaged",
                                  No = c("Not economically disadvantaged",
                                         NA)
                                  ),
    has_disability=fct_collapse(addNA(student_disability_status),
                                Yes = "Identified as having disability",
                                No = c("Not identified as having disability",
                                       NA)
                                )
    ) %>%
  
  # set the first level, which will be used as "reference"
  mutate(
    is_ell=fct_relevel(is_ell, "No"),
    is_disadvantaged=fct_relevel(is_disadvantaged, "No"),
    has_disability=fct_relevel(has_disability, "No"),
    Transformer=fct_relevel(Transformer, "control")
  ) %>% 
  
  mutate(
    Direction = case_when(
      pred_error >= 0 ~ "Positive",
      pred_error < 0 ~ "Negative"
      ),
    Direction = factor(Direction, levels=c("Positive","Negative")
                       )
  )


# configure contrasts for race and source
options(decorate.contr.Sum = c("", ""))
contrasts(dfp$race) = contr.Sum(levels(dfp$race))
contrasts(dfp$source) = contr.Sum(levels(dfp$source))

summary(dfp)
```
## Summary statistics

```{r}
dfp %>%
  filter(Transformer == "control") %>%
  summarise(
    Score = mean(holistic_score_adjudicated),
    N = n(),
    ELLs = sum(as.numeric(is_ell)),
    Disability = sum(as.numeric(has_disability)),
    Disadvantaged = sum(as.numeric(is_disadvantaged)),
    .by=c(race_ethnicity)
    ) %>% 
  arrange(race_ethnicity)

```




## Model from Research Question 1

Just adding in transformer model as a predictor and a random intercept for essay ID. This model has poor fit, with many useless parameters. Prompt_name is no longer useful as a grouping variable, so we can drop it.

```{r, eval=FALSE}
mod.rq1 <- lmer(mae 
                ~ Transformer
                + gender
                + race*is_ell
                + is_disadvantaged*has_disability
                + is_disadvantaged*is_ell
                + has_disability*is_ell
                + (1|prompt_name)
                + (1|essay_id),
                data=dfp
                )
tab_model(mod.rq1, show.aic=TRUE, show.reflvl=TRUE, prefix.labels="varname", p.adjust = "BH")
```

## Tear-down

We would be left with very little in the model.

```{r, eval=FALSE}
fit.min <- lmer(pred_error
            ~ Transformer
            # + race # increases AIC
            # + source # increases AIC
            # + is_disadvantaged # increases AIC
            # + is_ell # increases AIC
            # + has_disability # increases AIC
            # + gender # increases AIC
            # + race*is_disadvantaged # increases AIC
            # + race*is_ell # increases AIC
            # + race*has_disability # increases AIC
            # + race*source # increases AIC
            # + race*gender # increases AIC
            # + race*grade # increases AIC
            # + is_disadvantaged*has_disability # increases AIC
            # + is_disadvantaged*is_ell # increases AIC
            # + has_disability*is_ell # increases AIC
            # + gender*has_disability # increases AIC
            # + gender*is_disadvantaged # increases AIC
            # + gender*is_ell # small decrease (-1) to AIC
            # + (1 | prompt_name) # small decrese (-30) to AIC
            + (1 | essay_id),
            data=dfp
            )

tab_model(fit.min, show.aic=TRUE, show.reflvl=TRUE, prefix.labels="varname", p.adjust = "BH")
```

## Build-up: Interactions

While race did not help model fit on its own, its interaction with transformer model substantially improves model fit. The same pattern holds for interactions between transformer model and other demographic variables.

```{r}
fit <- lmer(mae
            ~ Transformer
            + Transformer*race
            + Transformer*is_ell
            + Transformer*has_disability
            + Transformer*is_disadvantaged
            + (1 | essay_id),
            REML = TRUE,
            data=dfp
            )

tab_model(fit, show.aic=TRUE,
          prefix.labels="varname",
          p.adjust = "BH")

```

## Extract Deviance Coded Estimates

```{r}
# Function to extract reference level statistics for race and transformer interactions
get_reference_stats <- function(model) {
  # Get fixed effects and variance-covariance matrix
  fe <- fixef(model)
  vcov_matrix <- vcov(model)
  
  # Extract main race effects (excluding interactions)
  race_indices <- grep("^race\\[", names(fe))
  race_coefs <- fe[race_indices]
  
  # Calculate main effect for white (reference level)
  white_coef <- -sum(race_coefs)
  
  # Get variance terms for main race effects
  race_vcov <- vcov_matrix[race_indices, race_indices]

  white_var <- sum(race_vcov)
  white_se <- sqrt(white_var)

  # Calculate statistics for main white effect
  df <- df.residual(model)
  white_t <- white_coef / white_se
  white_p <- 2 * pt(abs(white_t), df = df, lower.tail = FALSE)
  
  # Get transformer interaction effects for each transformer
  transformers <- c("black", "hispanic", "white")
  interaction_stats <- list()
  
  for(trans in transformers) {
    # Get indices for this transformer's race interactions
    trans_pattern <- paste0("Transformer", trans, ":race\\[")
    trans_indices <- grep(trans_pattern, names(fe))
    trans_coefs <- fe[trans_indices]
    
    # Calculate reference level coefficient
    trans_white_coef <- -sum(trans_coefs)
    
    # Get variance terms for this transformer's interactions
    trans_vcov <- vcov_matrix[trans_indices, trans_indices]
    trans_white_var <- sum(trans_vcov)
    trans_white_se <- sqrt(trans_white_var)
    
    # Calculate statistics
    trans_white_t <- trans_white_coef / trans_white_se
    trans_white_p <- 2 * pt(abs(trans_white_t), df = df, lower.tail = FALSE)
    
    # Store results
    interaction_stats[[trans]] <- list(
      coefficient = trans_white_coef,
      std_error = trans_white_se,
      t_value = trans_white_t,
      p_value = trans_white_p
    )
  }
  
  # Return all results
  return(list(
    main_effect = list(
      coefficient = white_coef,
      std_error = white_se,
      t_value = white_t,
      p_value = white_p
    ),
    transformer_interactions = interaction_stats
  ))
}


# Helper function to format results into a data frame
format_results <- function(stats) {
  # Create data frame for main effect
  main_df <- data.frame(
    Effect = "Main effect (White)",
    Coefficient = stats$main_effect$coefficient,
    SE = stats$main_effect$std_error,
    t_value = stats$main_effect$t_value,
    p_value = stats$main_effect$p_value
  )
  
  # Create data frame for interaction effects
  interaction_df <- do.call(rbind, lapply(names(stats$transformer_interactions), function(trans) {
    res <- stats$transformer_interactions[[trans]]
    data.frame(
      Effect = paste0("Transformer[", trans, "]", " x race[white]"),
      Coefficient = res$coefficient,
      SE = res$std_error,
      t_value = res$t_value,
      p_value = res$p_value
    )
  }))
  
  # Combine and return
  results_df <- rbind(main_df, interaction_df)
  rownames(results_df) <- NULL
  return(results_df)
}

stats <- get_reference_stats(fit)
results_table <- format_results(stats)
print(results_table)
```


## Save Table

```{r, eval=FALSE}
coefs <- summary(fit)$coefficients
cat(rownames(coefs), sep="\", \"")

labels <- c("(Intercept)",
            "Transformer[Black]",
            "Transformer[Hispanic]",
            "Transformer[White]",
            "Asian/Pacific Islander",
            "Black/African American",
            "Hispanic/Latino",
            "Two or more races/Other",
            "English language learner",
            "Identified as having disability",
            "Economically disadvantaged",
            "Transformer[Black]:Asian/Pacific Islander",
            "Transformer[Hispanic]:Asian/Pacific Islander",
            "Transformer[White]:Asian/Pacific Islander",
            "Transformer[Black]:Black/African American",
            "Transformer[Hispanic]:Black/African American",
            "Transformer[White]:Black/African American",
            "Transformer[Black]:Hispanic/Latino",
            "Transformer[Hispanic]:Hispanic/Latino",
            "Transformer[White]:Hispanic/Latino",
            "Transformer[Black]:Two or more races/Other",
            "Transformer[Hispanic]:Two or more races/Other",
            "Transformer[White]:Two or more races/Other",
            "Transformer[Black]:English language learner",
            "Transformer[Hispanic]:English language learner",
            "Transformer[White]:English language learner",
            "Transformer[Black]:Identified as having disability",
            "Transformer[Hispanic]:Identified as having disability",
            "Transformer[White]:Identified as having disability",
            "Transformer[Black]:Economically disadvantaged",
            "Transformer[Hispanic]:Economically disadvantaged",
            "Transformer[White]:Economically disadvantaged")
```

```{r, eval=FALSE}
tab_model(fit,
          title = "Prediction Error Regressed on Demographic Variables",
          dv.labels = "Prediction Error",
          show.aic=TRUE,
          show.reflvl=TRUE,
          prefix.labels="varname",
          p.adjust = "BH",
          pred.labels=labels,
          file = "../results/RQ2.html")
```

## Interaction Plots

```{r}

plot_interaction <- function(formula, color_name, color_labels) {
  emmip(
      fit,
      formula=formula,
      mode = "asymp",
      type = "scale",
      style = "factor",
      tlab = "Race/Ethnicity",
      ylab = "Prediction Error",
      xlab = "Data used to Train LLM") +
    scale_color_discrete(
      name = color_name,
      labels = color_labels) +
    scale_x_discrete(
      labels = c("control" = "Balanced",
                 "black" = "Black-Only",
                 "hispanic" = "Hispanic-only",
                 "white" = "White-only")) +
    theme_bw() +
    theme(
      legend.position = "right",
      legend.title = element_text(size = 10, face = "bold"),
      legend.text = element_text(size = 9),
      axis.title = element_text(size = 10, face = "bold"),
      axis.text = element_text(size = 9),
      axis.text.x = element_text(angle = 0, hjust = 0.5)
    )
  # if save_path
  # ggsave("../results/transformer_race.png", width = 8, height = 6, dpi = 300)
}

plot_interaction(formula(race ~ Transformer),
                 "Race/Ethnicity",
                 c("Asian/Pacific Islander",
                   "Black/African American",
                   "Hispanic/Latino",
                   "Two or more races/Other",
                   "White"))

plot_interaction(formula(is_ell ~ Transformer),
                 "ELL Status",
                 c("No", "Yes"))

plot_interaction(formula(has_disability ~ Transformer),
                 "Disability",
                 c("No", "Yes"))

plot_interaction(formula(is_disadvantaged ~ Transformer),
                 "Economic Disadvantage",
                 c("No", "Yes"))
```


